{
  "address": "0x80A75739E5aEA9211F2c053dFdd34F71b369A7Cd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "taxHandlerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasuryHandlerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currentDelegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint224",
          "name": "oldVotes",
          "type": "uint224"
        },
        {
          "indexed": false,
          "internalType": "uint224",
          "name": "newVotes",
          "type": "uint224"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "TaxHandlerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "TreasuryHandlerChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        },
        {
          "internalType": "uint224",
          "name": "votes",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        }
      ],
      "name": "getVotesAtBlock",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "taxHandlerAddress",
          "type": "address"
        }
      ],
      "name": "setTaxHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasuryHandlerAddress",
          "type": "address"
        }
      ],
      "name": "setTreasuryHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxHandler",
      "outputs": [
        {
          "internalType": "contract ITaxHandler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryHandler",
      "outputs": [
        {
          "internalType": "contract ITreasuryHandler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x99c4b6978fce367f5b205008c2b84fa519437d472535e233bb9cb2842c1b51cb",
  "receipt": {
    "to": null,
    "from": "0xE45079d379712E51408B00496D232407D9449F79",
    "contractAddress": "0x80A75739E5aEA9211F2c053dFdd34F71b369A7Cd",
    "transactionIndex": 0,
    "gasUsed": "1829747",
    "logsBloom": "0x
    "blockHash": "0x000004b60000268c312b2165bec12b90ccc909a114f884083496c4558015ae75",
    "transactionHash": "0x99c4b6978fce367f5b205008c2b84fa519437d472535e233bb9cb2842c1b51cb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1274212,
        "transactionHash": "0x99c4b6978fce367f5b205008c2b84fa519437d472535e233bb9cb2842c1b51cb",
        "address": "0x80A75739E5aEA9211F2c053dFdd34F71b369A7Cd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e45079d379712e51408b00496d232407d9449f79"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x000004b60000268c312b2165bec12b90ccc909a114f884083496c4558015ae75"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1274212,
        "transactionHash": "0x99c4b6978fce367f5b205008c2b84fa519437d472535e233bb9cb2842c1b51cb",
        "address": "0x80A75739E5aEA9211F2c053dFdd34F71b369A7Cd",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e45079d379712e51408b00496d232407d9449f79"
        ],
        "data": "0x0000000000000000000000000000001d6329f1c35ca4bfabb9f5610000000000",
        "logIndex": 1,
        "blockHash": "0x000004b60000268c312b2165bec12b90ccc909a114f884083496c4558015ae75"
      }
    ],
    "blockNumber": 1274212,
    "cumulativeGasUsed": "1829747",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "FlokiIsNotLate",
    "FlokiAA",
    "0x4E57Df17bFd54915815Ac770bdbA61B298c35888",
    "0x569e7177F39a1E263425Cf6F2595e68434D0EbA5"
  ],
  "numDeployments": 2,
  "solcInputHash": "9a7f0d0c3dfceb7f270cad6693fd67c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"taxHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryHandlerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentDelegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint224\",\"name\":\"oldVotes\",\"type\":\"uint224\"},{\"indexed\":false,\"internalType\":\"uint224\",\"name\":\"newVotes\",\"type\":\"uint224\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"TaxHandlerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"TreasuryHandlerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"getVotesAtBlock\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxHandlerAddress\",\"type\":\"address\"}],\"name\":\"setTaxHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryHandlerAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxHandler\",\"outputs\":[{\"internalType\":\"contract ITaxHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryHandler\",\"outputs\":[{\"internalType\":\"contract ITreasuryHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The Floki token has modular systems for tax and treasury handler as well as governance capabilities.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"The address on behalf of whom tokens can be spent by `spender`.\",\"spender\":\"The address authorized to spend tokens on behalf of `owner`.\"},\"returns\":{\"_0\":\"The allowance `owner` has given `spender`.\"}},\"approve(address,uint256)\":{\"details\":\"This method can be exploited by malicious spenders if their allowance is already non-zero. See the following document for details: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit. Ensure the spender can be trusted before calling this method if they've already been approved before. Otherwise use either the `increaseAllowance`/`decreaseAllowance` functions, or first set their allowance to zero, before setting a new allowance.\",\"params\":{\"amount\":\"The number of tokens `spender` is allowed to spend.\",\"spender\":\"Address to authorize for token expenditure.\"},\"returns\":{\"_0\":\"True if the approval succeeds, else an error is raised.\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"Address to retrieve balance for.\"},\"returns\":{\"_0\":\"The number of tokens owned by `account`.\"}},\"constructor\":{\"params\":{\"name_\":\"Name of the token.\",\"symbol_\":\"Symbol of the token.\",\"taxHandlerAddress\":\"Initial tax handler contract.\",\"treasuryHandlerAddress\":\"Initial treasury handler contract.\"}},\"decimals()\":{\"returns\":{\"_0\":\"Number of decimals used by the token.\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"spender\":\"Address of user authorized to spend caller's tokens.\",\"subtractedValue\":\"The number of tokens to remove from `spender`'s allowance.\"},\"returns\":{\"_0\":\"True if the allowance is successfully decreased, else an error is raised.\"}},\"delegate(address)\":{\"details\":\"It should be noted that users that want to vote themselves, also need to call this method, albeit with their own address.\",\"params\":{\"delegatee\":\"Address to delegate votes to.\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to.\",\"expiry\":\"The time at which to expire the signature.\",\"nonce\":\"The contract state required to match the signature.\",\"r\":\"Half of the ECDSA signature pair.\",\"s\":\"Half of the ECDSA signature pair.\",\"v\":\"The recovery byte of the signature.\"}},\"getVotesAtBlock(address,uint32)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check.\",\"blockNumber\":\"The block number to get the vote balance at.\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block.\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"addedValue\":\"The number of tokens to add to `spender`'s allowance.\",\"spender\":\"Address of user authorized to spend caller's tokens.\"},\"returns\":{\"_0\":\"True if the allowance is successfully increased, else an error is raised.\"}},\"name()\":{\"returns\":{\"_0\":\"Name of the token.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setTaxHandler(address)\":{\"params\":{\"taxHandlerAddress\":\"Address of new tax handler contract.\"}},\"setTreasuryHandler(address)\":{\"params\":{\"treasuryHandlerAddress\":\"Address of new treasury handler contract.\"}},\"symbol()\":{\"returns\":{\"_0\":\"Symbol of the token.\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The maximum number of tokens that will ever be in existence.\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer to recipient.\",\"recipient\":\"Address to send the caller's tokens to.\"},\"returns\":{\"_0\":\"True if transfer succeeds, else an error is raised.\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer to recipient.\",\"recipient\":\"Address to send the caller's tokens to.\",\"sender\":\"Address to move tokens from.\"},\"returns\":{\"_0\":\"True if the transfer succeeds, else an error is raised.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_allowances\":{\"details\":\"Registry of addresses users have given allowances to.\"},\"_balances\":{\"details\":\"Registry of user token balances.\"},\"_name\":{\"details\":\"Name of the token.\"},\"_symbol\":{\"details\":\"Symbol of the token.\"}},\"title\":\"Floki token contract\",\"version\":1},\"userdoc\":{\"events\":{\"DelegateChanged(address,address,address)\":{\"notice\":\"Emitted whenever a new delegate is set for an account.\"},\"DelegateVotesChanged(address,uint224,uint224)\":{\"notice\":\"Emitted when a delegate's vote count changes.\"},\"TaxHandlerChanged(address,address)\":{\"notice\":\"Emitted when the tax handler contract is changed.\"},\"TreasuryHandlerChanged(address,address)\":{\"notice\":\"Emitted when the treasury handler contract is changed.\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract.\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain.\"},\"allowance(address,address)\":{\"notice\":\"Get the allowance `owner` has given `spender`.\"},\"approve(address,uint256)\":{\"notice\":\"Approve address to spend caller's tokens.\"},\"balanceOf(address)\":{\"notice\":\"Get token balance of given account.\"},\"checkpoints(address,uint32)\":{\"notice\":\"Registry of balance checkpoints per account.\"},\"decimals()\":{\"notice\":\"Get number of decimals used by the token.\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease spender's allowance.\"},\"delegate(address)\":{\"notice\":\"Delegate votes to given address.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegate votes from signatory to `delegatee`.\"},\"delegates(address)\":{\"notice\":\"Registry of user delegates for governance.\"},\"getVotesAtBlock(address,uint32)\":{\"notice\":\"Determine the number of votes for an account as of a block number.\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase spender's allowance.\"},\"name()\":{\"notice\":\"Get token name.\"},\"nonces(address)\":{\"notice\":\"Registry of nonces for vote delegation.\"},\"numCheckpoints(address)\":{\"notice\":\"Registry of the number of balance checkpoints an account has.\"},\"setTaxHandler(address)\":{\"notice\":\"Set new tax handler contract.\"},\"setTreasuryHandler(address)\":{\"notice\":\"Set new treasury handler contract.\"},\"symbol()\":{\"notice\":\"Get token symbol.\"},\"taxHandler()\":{\"notice\":\"The contract implementing tax calculations.\"},\"totalSupply()\":{\"notice\":\"Get the maximum number of tokens.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer tokens from caller's address to another.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer tokens from one address to another.\"},\"treasuryHandler()\":{\"notice\":\"The contract that performs treasury-related operations.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FlokiIsNotLate.sol\":\"FlokiIsNotLate\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/FlokiIsNotLate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./governance/IGovernanceToken.sol\\\";\\nimport \\\"./tax/ITaxHandler.sol\\\";\\nimport \\\"./treasury/ITreasuryHandler.sol\\\";\\n\\n/**\\n * @title Floki token contract\\n * @dev The Floki token has modular systems for tax and treasury handler as well as governance capabilities.\\n */\\ncontract FlokiIsNotLate is IERC20, IGovernanceToken, Ownable {\\n    /// @dev Registry of user token balances.\\n    mapping(address => uint256) private _balances;\\n\\n    /// @dev Registry of addresses users have given allowances to.\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    /// @notice Registry of user delegates for governance.\\n    mapping(address => address) public delegates;\\n\\n    /// @notice Registry of nonces for vote delegation.\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice Registry of the number of balance checkpoints an account has.\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice Registry of balance checkpoints per account.\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice The contract implementing tax calculations.\\n    ITaxHandler public taxHandler;\\n\\n    /// @notice The contract that performs treasury-related operations.\\n    ITreasuryHandler public treasuryHandler;\\n\\n    /// @notice Emitted when the tax handler contract is changed.\\n    event TaxHandlerChanged(address oldAddress, address newAddress);\\n\\n    /// @notice Emitted when the treasury handler contract is changed.\\n    event TreasuryHandlerChanged(address oldAddress, address newAddress);\\n\\n    /// @dev Name of the token.\\n    string private _name;\\n\\n    /// @dev Symbol of the token.\\n    string private _symbol;\\n\\n    /**\\n     * @param name_ Name of the token.\\n     * @param symbol_ Symbol of the token.\\n     * @param taxHandlerAddress Initial tax handler contract.\\n     * @param treasuryHandlerAddress Initial treasury handler contract.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address taxHandlerAddress,\\n        address treasuryHandlerAddress\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        taxHandler = ITaxHandler(taxHandlerAddress);\\n        treasuryHandler = ITreasuryHandler(treasuryHandlerAddress);\\n\\n        _balances[_msgSender()] = totalSupply();\\n\\n        emit Transfer(address(0), _msgSender(), totalSupply());\\n    }\\n\\n    /**\\n     * @notice Get token name.\\n     * @return Name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @notice Get token symbol.\\n     * @return Symbol of the token.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @notice Get number of decimals used by the token.\\n     * @return Number of decimals used by the token.\\n     */\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @notice Get the maximum number of tokens.\\n     * @return The maximum number of tokens that will ever be in existence.\\n     */\\n    function totalSupply() public pure override returns (uint256) {\\n        // Ten trillion, i.e., 10,000,000,000,000 tokens.\\n        return 10000000000000000000000000000000000000000; // 10 trillions + 18 decimals\\n    }\\n\\n    /**\\n     * @notice Get token balance of given account.\\n     * @param account Address to retrieve balance for.\\n     * @return The number of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from caller's address to another.\\n     * @param recipient Address to send the caller's tokens to.\\n     * @param amount The number of tokens to transfer to recipient.\\n     * @return True if transfer succeeds, else an error is raised.\\n     */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the allowance `owner` has given `spender`.\\n     * @param owner The address on behalf of whom tokens can be spent by `spender`.\\n     * @param spender The address authorized to spend tokens on behalf of `owner`.\\n     * @return The allowance `owner` has given `spender`.\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Approve address to spend caller's tokens.\\n     * @dev This method can be exploited by malicious spenders if their allowance is already non-zero. See the following\\n     * document for details: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit.\\n     * Ensure the spender can be trusted before calling this method if they've already been approved before. Otherwise\\n     * use either the `increaseAllowance`/`decreaseAllowance` functions, or first set their allowance to zero, before\\n     * setting a new allowance.\\n     * @param spender Address to authorize for token expenditure.\\n     * @param amount The number of tokens `spender` is allowed to spend.\\n     * @return True if the approval succeeds, else an error is raised.\\n     */\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from one address to another.\\n     * @param sender Address to move tokens from.\\n     * @param recipient Address to send the caller's tokens to.\\n     * @param amount The number of tokens to transfer to recipient.\\n     * @return True if the transfer succeeds, else an error is raised.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"FLOKI:transferFrom:ALLOWANCE_EXCEEDED: Transfer amount exceeds allowance.\\\"\\n        );\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Increase spender's allowance.\\n     * @param spender Address of user authorized to spend caller's tokens.\\n     * @param addedValue The number of tokens to add to `spender`'s allowance.\\n     * @return True if the allowance is successfully increased, else an error is raised.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decrease spender's allowance.\\n     * @param spender Address of user authorized to spend caller's tokens.\\n     * @param subtractedValue The number of tokens to remove from `spender`'s allowance.\\n     * @return True if the allowance is successfully decreased, else an error is raised.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"FLOKI:decreaseAllowance:ALLOWANCE_UNDERFLOW: Subtraction results in sub-zero allowance.\\\"\\n        );\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate votes to given address.\\n     * @dev It should be noted that users that want to vote themselves, also need to call this method, albeit with their\\n     * own address.\\n     * @param delegatee Address to delegate votes to.\\n     */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from signatory to `delegatee`.\\n     * @param delegatee The address to delegate votes to.\\n     * @param nonce The contract state required to match the signature.\\n     * @param expiry The time at which to expire the signature.\\n     * @param v The recovery byte of the signature.\\n     * @param r Half of the ECDSA signature pair.\\n     * @param s Half of the ECDSA signature pair.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), block.chainid, address(this))\\n        );\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n\\n        require(\\n            signatory != address(0),\\n            \\\"FLOKI:delegateBySig:INVALID_SIGNATURE: Received signature was invalid.\\\"\\n        );\\n        require(\\n            block.timestamp <= expiry,\\n            \\\"FLOKI:delegateBySig:EXPIRED_SIGNATURE: Received signature has expired.\\\"\\n        );\\n        require(\\n            nonce == nonces[signatory]++,\\n            \\\"FLOKI:delegateBySig:INVALID_NONCE: Received nonce was invalid.\\\"\\n        );\\n\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Determine the number of votes for an account as of a block number.\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     */\\n    function getVotesAtBlock(address account, uint32 blockNumber) public view returns (uint224) {\\n        require(\\n            blockNumber < block.number,\\n            \\\"FLOKI:getVotesAtBlock:FUTURE_BLOCK: Cannot get votes at a block in the future.\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance.\\n        if (checkpoints[account][nCheckpoints - 1].blockNumber <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance.\\n        if (checkpoints[account][0].blockNumber > blockNumber) {\\n            return 0;\\n        }\\n\\n        // Perform binary search.\\n        uint32 lowerBound = 0;\\n        uint32 upperBound = nCheckpoints - 1;\\n        while (upperBound > lowerBound) {\\n            uint32 center = upperBound - (upperBound - lowerBound) / 2;\\n            Checkpoint memory checkpoint = checkpoints[account][center];\\n\\n            if (checkpoint.blockNumber == blockNumber) {\\n                return checkpoint.votes;\\n            } else if (checkpoint.blockNumber < blockNumber) {\\n                lowerBound = center;\\n            } else {\\n                upperBound = center - 1;\\n            }\\n        }\\n\\n        // No exact block found. Use last known balance before that block number.\\n        return checkpoints[account][lowerBound].votes;\\n    }\\n\\n    /**\\n     * @notice Set new tax handler contract.\\n     * @param taxHandlerAddress Address of new tax handler contract.\\n     */\\n    function setTaxHandler(address taxHandlerAddress) external onlyOwner {\\n        address oldTaxHandlerAddress = address(taxHandler);\\n        taxHandler = ITaxHandler(taxHandlerAddress);\\n\\n        emit TaxHandlerChanged(oldTaxHandlerAddress, taxHandlerAddress);\\n    }\\n\\n    /**\\n     * @notice Set new treasury handler contract.\\n     * @param treasuryHandlerAddress Address of new treasury handler contract.\\n     */\\n    function setTreasuryHandler(address treasuryHandlerAddress) external onlyOwner {\\n        address oldTreasuryHandlerAddress = address(treasuryHandler);\\n        treasuryHandler = ITreasuryHandler(treasuryHandlerAddress);\\n\\n        emit TreasuryHandlerChanged(oldTreasuryHandlerAddress, treasuryHandlerAddress);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from one address to another.\\n     * @param delegator Address from which to delegate votes for.\\n     * @param delegatee Address to delegate votes to.\\n     */\\n    function _delegate(address delegator, address delegatee) private {\\n        address currentDelegate = delegates[delegator];\\n        uint256 delegatorBalance = _balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, uint224(delegatorBalance));\\n    }\\n\\n    /**\\n     * @notice Move delegates from one address to another.\\n     * @param from Representative to move delegates from.\\n     * @param to Representative to move delegates to.\\n     * @param amount Number of delegates to move.\\n     */\\n    function _moveDelegates(address from, address to, uint224 amount) private {\\n        // No need to update checkpoints if the votes don't actually move between different delegates. This can be the\\n        // case where tokens are transferred between two parties that have delegated their votes to the same address.\\n        if (from == to) {\\n            return;\\n        }\\n\\n        // Some users preemptively delegate their votes (i.e. before they have any tokens). No need to perform an update\\n        // to the checkpoints in that case.\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (from != address(0)) {\\n            uint32 fromRepNum = numCheckpoints[from];\\n            uint224 fromRepOld = fromRepNum > 0 ? checkpoints[from][fromRepNum - 1].votes : 0;\\n            uint224 fromRepNew = fromRepOld - amount;\\n\\n            _writeCheckpoint(from, fromRepNum, fromRepOld, fromRepNew);\\n        }\\n\\n        if (to != address(0)) {\\n            uint32 toRepNum = numCheckpoints[to];\\n            uint224 toRepOld = toRepNum > 0 ? checkpoints[to][toRepNum - 1].votes : 0;\\n            uint224 toRepNew = toRepOld + amount;\\n\\n            _writeCheckpoint(to, toRepNum, toRepOld, toRepNew);\\n        }\\n    }\\n\\n    /**\\n     * @notice Write balance checkpoint to chain.\\n     * @param delegatee The address to write the checkpoint for.\\n     * @param nCheckpoints The number of checkpoints `delegatee` already has.\\n     * @param oldVotes Number of votes prior to this checkpoint.\\n     * @param newVotes Number of votes `delegatee` now has.\\n     */\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint224 oldVotes,\\n        uint224 newVotes\\n    ) private {\\n        uint32 blockNumber = uint32(block.number);\\n\\n        if (\\n            nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].blockNumber == blockNumber\\n        ) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    /**\\n     * @notice Approve spender on behalf of owner.\\n     * @param owner Address on behalf of whom tokens can be spent by `spender`.\\n     * @param spender Address to authorize for token expenditure.\\n     * @param amount The number of tokens `spender` is allowed to spend.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(\\n            owner != address(0),\\n            \\\"FLOKI:_approve:OWNER_ZERO: Cannot approve for the zero address.\\\"\\n        );\\n        require(\\n            spender != address(0),\\n            \\\"FLOKI:_approve:SPENDER_ZERO: Cannot approve to the zero address.\\\"\\n        );\\n\\n        _allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from account `from` to account `to`.\\n     * @param from Address the tokens are moved out of.\\n     * @param to Address the tokens are moved to.\\n     * @param amount The number of tokens to transfer.\\n     */\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(\\n            from != address(0),\\n            \\\"FLOKI:_transfer:FROM_ZERO: Cannot transfer from the zero address.\\\"\\n        );\\n        require(to != address(0), \\\"FLOKI:_transfer:TO_ZERO: Cannot transfer to the zero address.\\\");\\n        require(\\n            amount > 0,\\n            \\\"FLOKI:_transfer:ZERO_AMOUNT: Transfer amount must be greater than zero.\\\"\\n        );\\n        require(\\n            amount <= _balances[from],\\n            \\\"FLOKI:_transfer:INSUFFICIENT_BALANCE: Transfer amount exceeds balance.\\\"\\n        );\\n\\n        treasuryHandler.beforeTransferHandler(from, to, amount);\\n\\n        uint256 tax = taxHandler.getTax(from, to, amount);\\n        uint256 taxedAmount = amount - tax;\\n\\n        _balances[from] -= amount;\\n        _balances[to] += taxedAmount;\\n        _moveDelegates(delegates[from], delegates[to], uint224(taxedAmount));\\n\\n        if (tax > 0) {\\n            _balances[address(treasuryHandler)] += tax;\\n\\n            _moveDelegates(delegates[from], delegates[address(treasuryHandler)], uint224(tax));\\n\\n            emit Transfer(from, address(treasuryHandler), tax);\\n        }\\n\\n        treasuryHandler.afterTransferHandler(from, to, amount);\\n\\n        emit Transfer(from, to, taxedAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x4434ca27e28a622b2155d2ad81652d73358be2d54d14a8ed39a0caedfefb8e8f\",\"license\":\"MIT\"},\"contracts/governance/IGovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n/**\\r\\n * @title Governance token interface.\\r\\n */\\r\\ninterface IGovernanceToken {\\r\\n    /// @notice A checkpoint for marking number of votes as of a given block.\\r\\n    struct Checkpoint {\\r\\n        // The 32-bit unsigned integer is valid until these estimated dates for these given chains:\\r\\n        //  - BSC: Sat Dec 23 2428 18:23:11 UTC\\r\\n        //  - ETH: Tue Apr 18 3826 09:27:12 UTC\\r\\n        // This assumes that block mining rates don't speed up.\\r\\n        uint32 blockNumber;\\r\\n        // This type is set to `uint224` for optimizations purposes (i.e., specifically to fit in a 32-byte block). It\\r\\n        // assumes that the number of votes for the implementing governance token never exceeds the maximum value for a\\r\\n        // 224-bit number.\\r\\n        uint224 votes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the number of votes for an account as of a block number.\\r\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n     * @param account The address of the account to check.\\r\\n     * @param blockNumber The block number to get the vote balance at.\\r\\n     * @return The number of votes the account had as of the given block.\\r\\n     */\\r\\n    function getVotesAtBlock(address account, uint32 blockNumber) external view returns (uint224);\\r\\n\\r\\n    /// @notice Emitted whenever a new delegate is set for an account.\\r\\n    event DelegateChanged(address indexed delegator, address currentDelegate, address newDelegate);\\r\\n\\r\\n    /// @notice Emitted when a delegate's vote count changes.\\r\\n    event DelegateVotesChanged(address indexed delegatee, uint224 oldVotes, uint224 newVotes);\\r\\n}\\r\\n\",\"keccak256\":\"0x88f974654a215395e6fa189c138f50e8c65084f1604f7bae629ca453a9bdda77\",\"license\":\"MIT\"},\"contracts/tax/ITaxHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n/**\\r\\n * @title Tax handler interface\\r\\n * @dev Any class that implements this interface can be used for protocol-specific tax calculations.\\r\\n */\\r\\ninterface ITaxHandler {\\r\\n    /**\\r\\n     * @notice Get number of tokens to pay as tax.\\r\\n     * @param benefactor Address of the benefactor.\\r\\n     * @param beneficiary Address of the beneficiary.\\r\\n     * @param amount Number of tokens in the transfer.\\r\\n     * @return Number of tokens to pay as tax.\\r\\n     */\\r\\n    function getTax(\\r\\n        address benefactor,\\r\\n        address beneficiary,\\r\\n        uint256 amount\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xbd22c661e2b7d8a0dad21ea6cc9e69cc0a04a96372a0dc6f2305b759533b8b53\",\"license\":\"MIT\"},\"contracts/treasury/ITreasuryHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n/**\\r\\n * @title Treasury handler interface\\r\\n * @dev Any class that implements this interface can be used for protocol-specific operations pertaining to the treasury.\\r\\n */\\r\\ninterface ITreasuryHandler {\\r\\n    /**\\r\\n     * @notice Perform operations before a transfer is executed.\\r\\n     * @param benefactor Address of the benefactor.\\r\\n     * @param beneficiary Address of the beneficiary.\\r\\n     * @param amount Number of tokens in the transfer.\\r\\n     */\\r\\n    function beforeTransferHandler(\\r\\n        address benefactor,\\r\\n        address beneficiary,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Perform operations after a transfer is executed.\\r\\n     * @param benefactor Address of the benefactor.\\r\\n     * @param beneficiary Address of the beneficiary.\\r\\n     * @param amount Number of tokens in the transfer.\\r\\n     */\\r\\n    function afterTransferHandler(\\r\\n        address benefactor,\\r\\n        address beneficiary,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x03482ee27015d8cb3948062ab2a10c2dae25099a04912ab2d6c5763b4bb94ef5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200213e3803806200213e83398101604081905262000034916200030d565b6200003f336200012d565b8351620000549060099060208701906200017d565b5082516200006a90600a9060208601906200017d565b50600780546001600160a01b038085166001600160a01b0319928316179092556008805492841692909116919091179055620000b4701d6329f1c35ca4bfabb9f561000000000090565b60016000336001600160a01b03168152602081019190915260400160002055336001600160a01b031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef701d6329f1c35ca4bfabb9f561000000000060405190815260200160405180910390a350505050620003d9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200018b906200039c565b90600052602060002090601f016020900481019282620001af5760008555620001fa565b82601f10620001ca57805160ff1916838001178555620001fa565b82800160010185558215620001fa579182015b82811115620001fa578251825591602001919060010190620001dd565b50620002089291506200020c565b5090565b5b808211156200020857600081556001016200020d565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200024b57600080fd5b81516001600160401b038082111562000268576200026862000223565b604051601f8301601f19908116603f0116810190828211818310171562000293576200029362000223565b81604052838152602092508683858801011115620002b057600080fd5b600091505b83821015620002d45785820183015181830184015290820190620002b5565b83821115620002e65760008385830101525b9695505050505050565b80516001600160a01b03811681146200030857600080fd5b919050565b600080600080608085870312156200032457600080fd5b84516001600160401b03808211156200033c57600080fd5b6200034a8883890162000239565b955060208701519150808211156200036157600080fd5b50620003708782880162000239565b9350506200038160408601620002f0565b91506200039160608601620002f0565b905092959194509250565b600181811c90821680620003b157607f821691505b60208210811415620003d357634e487b7160e01b600052602260045260246000fd5b50919050565b611d5580620003e96000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636fcfff45116100f9578063a9059cbb11610097578063dd62ed3e11610071578063dd62ed3e14610417578063e7a324dc14610450578063f1127ed814610477578063f2fde38b146104de57600080fd5b8063a9059cbb146103de578063a9373b7b146103f1578063c3cda5201461040457600080fd5b80637ecebe00116100d35780637ecebe00146103925780638da5cb5b146103b257806395d89b41146103c3578063a457c2d7146103cb57600080fd5b80636fcfff451461032657806370a0823114610361578063715018a61461038a57600080fd5b806323b872dd11610166578063395093511161014057806339509351146102c2578063488d4a51146102d5578063587cde1e146102ea5780635c19a95c1461031357600080fd5b806323b872dd14610275578063271a452914610288578063313ce567146102b357600080fd5b806306fdde03146101ae578063095ea7b3146101cc57806312280ba8146101ef578063178896331461021a57806318160ddd1461022d57806320606b701461024e575b600080fd5b6101b66104f1565b6040516101c391906119df565b60405180910390f35b6101df6101da366004611a50565b610583565b60405190151581526020016101c3565b600754610202906001600160a01b031681565b6040516001600160a01b0390911681526020016101c3565b600854610202906001600160a01b031681565b701d6329f1c35ca4bfabb9f56100000000005b6040519081526020016101c3565b6102407f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6101df610283366004611a7a565b61059a565b61029b610296366004611ab6565b610670565b6040516001600160e01b0390911681526020016101c3565b604051601281526020016101c3565b6101df6102d0366004611a50565b610938565b6102e86102e3366004611af6565b610974565b005b6102026102f8366004611af6565b6003602052600090815260409020546001600160a01b031681565b6102e8610321366004611af6565b6109dd565b61034c610334366004611af6565b60056020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016101c3565b61024061036f366004611af6565b6001600160a01b031660009081526001602052604090205490565b6102e86109ea565b6102406103a0366004611af6565b60046020526000908152604090205481565b6000546001600160a01b0316610202565b6101b66109fe565b6101df6103d9366004611a50565b610a0d565b6101df6103ec366004611a50565b610ae4565b6102e86103ff366004611af6565b610af1565b6102e8610412366004611b18565b610b53565b610240610425366004611b78565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6102407fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b6104ba610485366004611ab6565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160e01b031682565b6040805163ffffffff90931683526001600160e01b039091166020830152016101c3565b6102e86104ec366004611af6565b610e7f565b60606009805461050090611bab565b80601f016020809104026020016040519081016040528092919081815260200182805461052c90611bab565b80156105795780601f1061054e57610100808354040283529160200191610579565b820191906000526020600020905b81548152906001019060200180831161055c57829003601f168201915b5050505050905090565b6000610590338484610ef5565b5060015b92915050565b60006105a7848484611050565b6001600160a01b0384166000908152600260209081526040808320338452909152902054828110156106585760405162461bcd60e51b815260206004820152604960248201527f464c4f4b493a7472616e7366657246726f6d3a414c4c4f57414e43455f45584360448201527f45454445443a205472616e7366657220616d6f756e7420657863656564732061606482015268363637bbb0b731b29760b91b608482015260a4015b60405180910390fd5b6106658533858403610ef5565b506001949350505050565b6000438263ffffffff16106107045760405162461bcd60e51b815260206004820152604e60248201527f464c4f4b493a676574566f7465734174426c6f636b3a4655545552455f424c4f60448201527f434b3a2043616e6e6f742067657420766f746573206174206120626c6f636b2060648201526d34b7103a343290333aba3ab9329760911b608482015260a40161064f565b6001600160a01b03831660009081526005602052604090205463ffffffff1680610732576000915050610594565b6001600160a01b038416600090815260066020526040812063ffffffff85169161075d600185611bfc565b63ffffffff908116825260208201929092526040016000205416116107d0576001600160a01b0384166000908152600660205260408120906107a0600184611bfc565b63ffffffff168152602081019190915260400160002054600160201b90046001600160e01b031691506105949050565b6001600160a01b038416600090815260066020908152604080832083805290915290205463ffffffff8085169116111561080e576000915050610594565b60008061081c600184611bfc565b90505b8163ffffffff168163ffffffff1611156108f357600060026108418484611bfc565b61084b9190611c21565b6108559083611bfc565b6001600160a01b038816600090815260066020908152604080832063ffffffff858116855290835292819020815180830190925254808416808352600160201b9091046001600160e01b03169282019290925292935090881614156108c4576020015194506105949350505050565b805163ffffffff808916911610156108de578193506108ec565b6108e9600183611bfc565b92505b505061081f565b506001600160a01b038516600090815260066020908152604080832063ffffffff909416835292905220546001600160e01b03600160201b9091041691505092915050565b3360008181526002602090815260408083206001600160a01b0387168452909152812054909161059091859061096f908690611c52565b610ef5565b61097c611573565b600780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ed910c9481701ba32afe0c247572aaece27072f230c8ec769bf245fc0b38de691015b60405180910390a15050565b6109e733826115cd565b50565b6109f2611573565b6109fc600061165a565b565b6060600a805461050090611bab565b3360009081526002602090815260408083206001600160a01b038616845290915281205482811015610acd5760405162461bcd60e51b815260206004820152605760248201527f464c4f4b493a6465637265617365416c6c6f77616e63653a414c4c4f57414e4360448201527f455f554e444552464c4f573a205375627472616374696f6e20726573756c747360648201527f20696e207375622d7a65726f20616c6c6f77616e63652e000000000000000000608482015260a40161064f565b610ada3385858403610ef5565b5060019392505050565b6000610590338484611050565b610af9611573565b600880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f1bf87992a35ee29395ab494f9adb9a500a7fa60c3082cba0ef02701bb35900d991016109d1565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866610b7e6104f1565b8051602091820120604080518084019490945283810191909152466060840152306080808501919091528151808503909101815260a0840182528051908301207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08501526001600160a01b038b1660e085015261010084018a90526101208085018a90528251808603909101815261014085019092528151919092012061190160f01b61016084015261016283018290526101828301819052909250906000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610caf573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610d475760405162461bcd60e51b815260206004820152604660248201527f464c4f4b493a64656c656761746542795369673a494e56414c49445f5349474e60448201527f41545552453a205265636569766564207369676e61747572652077617320696e6064820152653b30b634b21760d11b608482015260a40161064f565b87421115610dcc5760405162461bcd60e51b815260206004820152604660248201527f464c4f4b493a64656c656761746542795369673a455850495245445f5349474e60448201527f41545552453a205265636569766564207369676e6174757265206861732065786064820152653834b932b21760d11b608482015260a40161064f565b6001600160a01b0381166000908152600460205260408120805491610df083611c6a565b919050558914610e685760405162461bcd60e51b815260206004820152603e60248201527f464c4f4b493a64656c656761746542795369673a494e56414c49445f4e4f4e4360448201527f453a205265636569766564206e6f6e63652077617320696e76616c69642e0000606482015260840161064f565b610e72818b6115cd565b505050505b505050505050565b610e87611573565b6001600160a01b038116610eec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161064f565b6109e78161165a565b6001600160a01b038316610f715760405162461bcd60e51b815260206004820152603f60248201527f464c4f4b493a5f617070726f76653a4f574e45525f5a45524f3a2043616e6e6f60448201527f7420617070726f766520666f7220746865207a65726f20616464726573732e00606482015260840161064f565b6001600160a01b038216610fef576040805162461bcd60e51b81526020600482015260248101919091527f464c4f4b493a5f617070726f76653a5350454e4445525f5a45524f3a2043616e60448201527f6e6f7420617070726f766520746f20746865207a65726f20616464726573732e606482015260840161064f565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166110d65760405162461bcd60e51b815260206004820152604160248201527f464c4f4b493a5f7472616e736665723a46524f4d5f5a45524f3a2043616e6e6f60448201527f74207472616e736665722066726f6d20746865207a65726f20616464726573736064820152601760f91b608482015260a40161064f565b6001600160a01b0382166111525760405162461bcd60e51b815260206004820152603d60248201527f464c4f4b493a5f7472616e736665723a544f5f5a45524f3a2043616e6e6f742060448201527f7472616e7366657220746f20746865207a65726f20616464726573732e000000606482015260840161064f565b600081116111d85760405162461bcd60e51b815260206004820152604760248201527f464c4f4b493a5f7472616e736665723a5a45524f5f414d4f554e543a2054726160448201527f6e7366657220616d6f756e74206d75737420626520677265617465722074686160648201526637103d32b9379760c91b608482015260a40161064f565b6001600160a01b0383166000908152600160205260409020548111156112755760405162461bcd60e51b815260206004820152604660248201527f464c4f4b493a5f7472616e736665723a494e53554646494349454e545f42414c60448201527f414e43453a205472616e7366657220616d6f756e7420657863656564732062616064820152653630b731b29760d11b608482015260a40161064f565b60085460405163c6512cc160e01b81526001600160a01b0385811660048301528481166024830152604482018490529091169063c6512cc190606401600060405180830381600087803b1580156112cb57600080fd5b505af11580156112df573d6000803e3d6000fd5b50506007546040516335eb486b60e21b81526001600160a01b03878116600483015286811660248301526044820186905260009450909116915063d7ad21ac90606401602060405180830381865afa15801561133f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113639190611c85565b905060006113718284611c9e565b6001600160a01b03861660009081526001602052604081208054929350859290919061139e908490611c9e565b90915550506001600160a01b038416600090815260016020526040812080548392906113cb908490611c52565b90915550506001600160a01b03808616600090815260036020526040808220548784168352912054611402929182169116836116aa565b81156114b1576008546001600160a01b031660009081526001602052604081208054849290611432908490611c52565b90915550506001600160a01b03808616600090815260036020526040808220546008548416835291205461146b929182169116846116aa565b6008546040518381526001600160a01b03918216918716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35b60085460405163e613b1cd60e01b81526001600160a01b0387811660048301528681166024830152604482018690529091169063e613b1cd90606401600060405180830381600087803b15801561150757600080fd5b505af115801561151b573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161156491815260200190565b60405180910390a35050505050565b6000546001600160a01b031633146109fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161064f565b6001600160a01b03828116600081815260036020818152604080842080546001845294829020549383528787166001600160a01b03198616811790915581519490961680855291840195909552939092917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f910160405180910390a26116548284836116aa565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031614156116c957505050565b6001600160e01b0381166116dc57505050565b6001600160a01b03831615611783576001600160a01b03831660009081526005602052604081205463ffffffff169081611717576000611763565b6001600160a01b03851660009081526006602052604081209061173b600185611bfc565b63ffffffff168152602081019190915260400160002054600160201b90046001600160e01b03165b905060006117718483611cb5565b905061177f8684848461182b565b5050505b6001600160a01b03821615611826576001600160a01b03821660009081526005602052604081205463ffffffff1690816117be57600061180a565b6001600160a01b0384166000908152600660205260408120906117e2600185611bfc565b63ffffffff168152602081019190915260400160002054600160201b90046001600160e01b03165b905060006118188483611cd5565b9050610e778584848461182b565b505050565b4363ffffffff84161580159061188357506001600160a01b038516600090815260066020526040812063ffffffff831691611867600188611bfc565b63ffffffff908116825260208201929092526040016000205416145b156118f3576001600160a01b038516600090815260066020526040812083916118ad600188611bfc565b63ffffffff1663ffffffff16815260200190815260200160002060000160046101000a8154816001600160e01b0302191690836001600160e01b0316021790555061198a565b60408051808201825263ffffffff80841682526001600160e01b0380861660208085019182526001600160a01b038b166000908152600682528681208b86168252909152949094209251935116600160201b029216919091179055611959846001611d00565b6001600160a01b0386166000908152600560205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160e01b038086168252841660208201526001600160a01b038716917fda5a64c2947c0b7bf4d6e7bf736c6f84d9d1c5f991770f88bbeb3fe19c85a134910160405180910390a25050505050565b600060208083528351808285015260005b81811015611a0c578581018301518582016040015282016119f0565b81811115611a1e576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114611a4b57600080fd5b919050565b60008060408385031215611a6357600080fd5b611a6c83611a34565b946020939093013593505050565b600080600060608486031215611a8f57600080fd5b611a9884611a34565b9250611aa660208501611a34565b9150604084013590509250925092565b60008060408385031215611ac957600080fd5b611ad283611a34565b9150602083013563ffffffff81168114611aeb57600080fd5b809150509250929050565b600060208284031215611b0857600080fd5b611b1182611a34565b9392505050565b60008060008060008060c08789031215611b3157600080fd5b611b3a87611a34565b95506020870135945060408701359350606087013560ff81168114611b5e57600080fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215611b8b57600080fd5b611b9483611a34565b9150611ba260208401611a34565b90509250929050565b600181811c90821680611bbf57607f821691505b60208210811415611be057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015611c1957611c19611be6565b039392505050565b600063ffffffff80841680611c4657634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60008219821115611c6557611c65611be6565b500190565b6000600019821415611c7e57611c7e611be6565b5060010190565b600060208284031215611c9757600080fd5b5051919050565b600082821015611cb057611cb0611be6565b500390565b60006001600160e01b0383811690831681811015611c1957611c19611be6565b60006001600160e01b03828116848216808303821115611cf757611cf7611be6565b01949350505050565b600063ffffffff808316818516808303821115611cf757611cf7611be656fea264697066735822122023d2144c6e5b9b2ec2b1291e98e07bea18c156d69dab9c619eecd029d07a73ff64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80636fcfff45116100f9578063a9059cbb11610097578063dd62ed3e11610071578063dd62ed3e14610417578063e7a324dc14610450578063f1127ed814610477578063f2fde38b146104de57600080fd5b8063a9059cbb146103de578063a9373b7b146103f1578063c3cda5201461040457600080fd5b80637ecebe00116100d35780637ecebe00146103925780638da5cb5b146103b257806395d89b41146103c3578063a457c2d7146103cb57600080fd5b80636fcfff451461032657806370a0823114610361578063715018a61461038a57600080fd5b806323b872dd11610166578063395093511161014057806339509351146102c2578063488d4a51146102d5578063587cde1e146102ea5780635c19a95c1461031357600080fd5b806323b872dd14610275578063271a452914610288578063313ce567146102b357600080fd5b806306fdde03146101ae578063095ea7b3146101cc57806312280ba8146101ef578063178896331461021a57806318160ddd1461022d57806320606b701461024e575b600080fd5b6101b66104f1565b6040516101c391906119df565b60405180910390f35b6101df6101da366004611a50565b610583565b60405190151581526020016101c3565b600754610202906001600160a01b031681565b6040516001600160a01b0390911681526020016101c3565b600854610202906001600160a01b031681565b701d6329f1c35ca4bfabb9f56100000000005b6040519081526020016101c3565b6102407f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6101df610283366004611a7a565b61059a565b61029b610296366004611ab6565b610670565b6040516001600160e01b0390911681526020016101c3565b604051601281526020016101c3565b6101df6102d0366004611a50565b610938565b6102e86102e3366004611af6565b610974565b005b6102026102f8366004611af6565b6003602052600090815260409020546001600160a01b031681565b6102e8610321366004611af6565b6109dd565b61034c610334366004611af6565b60056020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016101c3565b61024061036f366004611af6565b6001600160a01b031660009081526001602052604090205490565b6102e86109ea565b6102406103a0366004611af6565b60046020526000908152604090205481565b6000546001600160a01b0316610202565b6101b66109fe565b6101df6103d9366004611a50565b610a0d565b6101df6103ec366004611a50565b610ae4565b6102e86103ff366004611af6565b610af1565b6102e8610412366004611b18565b610b53565b610240610425366004611b78565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6102407fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b6104ba610485366004611ab6565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160e01b031682565b6040805163ffffffff90931683526001600160e01b039091166020830152016101c3565b6102e86104ec366004611af6565b610e7f565b60606009805461050090611bab565b80601f016020809104026020016040519081016040528092919081815260200182805461052c90611bab565b80156105795780601f1061054e57610100808354040283529160200191610579565b820191906000526020600020905b81548152906001019060200180831161055c57829003601f168201915b5050505050905090565b6000610590338484610ef5565b5060015b92915050565b60006105a7848484611050565b6001600160a01b0384166000908152600260209081526040808320338452909152902054828110156106585760405162461bcd60e51b815260206004820152604960248201527f464c4f4b493a7472616e7366657246726f6d3a414c4c4f57414e43455f45584360448201527f45454445443a205472616e7366657220616d6f756e7420657863656564732061606482015268363637bbb0b731b29760b91b608482015260a4015b60405180910390fd5b6106658533858403610ef5565b506001949350505050565b6000438263ffffffff16106107045760405162461bcd60e51b815260206004820152604e60248201527f464c4f4b493a676574566f7465734174426c6f636b3a4655545552455f424c4f60448201527f434b3a2043616e6e6f742067657420766f746573206174206120626c6f636b2060648201526d34b7103a343290333aba3ab9329760911b608482015260a40161064f565b6001600160a01b03831660009081526005602052604090205463ffffffff1680610732576000915050610594565b6001600160a01b038416600090815260066020526040812063ffffffff85169161075d600185611bfc565b63ffffffff908116825260208201929092526040016000205416116107d0576001600160a01b0384166000908152600660205260408120906107a0600184611bfc565b63ffffffff168152602081019190915260400160002054600160201b90046001600160e01b031691506105949050565b6001600160a01b038416600090815260066020908152604080832083805290915290205463ffffffff8085169116111561080e576000915050610594565b60008061081c600184611bfc565b90505b8163ffffffff168163ffffffff1611156108f357600060026108418484611bfc565b61084b9190611c21565b6108559083611bfc565b6001600160a01b038816600090815260066020908152604080832063ffffffff858116855290835292819020815180830190925254808416808352600160201b9091046001600160e01b03169282019290925292935090881614156108c4576020015194506105949350505050565b805163ffffffff808916911610156108de578193506108ec565b6108e9600183611bfc565b92505b505061081f565b506001600160a01b038516600090815260066020908152604080832063ffffffff909416835292905220546001600160e01b03600160201b9091041691505092915050565b3360008181526002602090815260408083206001600160a01b0387168452909152812054909161059091859061096f908690611c52565b610ef5565b61097c611573565b600780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ed910c9481701ba32afe0c247572aaece27072f230c8ec769bf245fc0b38de691015b60405180910390a15050565b6109e733826115cd565b50565b6109f2611573565b6109fc600061165a565b565b6060600a805461050090611bab565b3360009081526002602090815260408083206001600160a01b038616845290915281205482811015610acd5760405162461bcd60e51b815260206004820152605760248201527f464c4f4b493a6465637265617365416c6c6f77616e63653a414c4c4f57414e4360448201527f455f554e444552464c4f573a205375627472616374696f6e20726573756c747360648201527f20696e207375622d7a65726f20616c6c6f77616e63652e000000000000000000608482015260a40161064f565b610ada3385858403610ef5565b5060019392505050565b6000610590338484611050565b610af9611573565b600880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f1bf87992a35ee29395ab494f9adb9a500a7fa60c3082cba0ef02701bb35900d991016109d1565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866610b7e6104f1565b8051602091820120604080518084019490945283810191909152466060840152306080808501919091528151808503909101815260a0840182528051908301207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08501526001600160a01b038b1660e085015261010084018a90526101208085018a90528251808603909101815261014085019092528151919092012061190160f01b61016084015261016283018290526101828301819052909250906000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610caf573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610d475760405162461bcd60e51b815260206004820152604660248201527f464c4f4b493a64656c656761746542795369673a494e56414c49445f5349474e60448201527f41545552453a205265636569766564207369676e61747572652077617320696e6064820152653b30b634b21760d11b608482015260a40161064f565b87421115610dcc5760405162461bcd60e51b815260206004820152604660248201527f464c4f4b493a64656c656761746542795369673a455850495245445f5349474e60448201527f41545552453a205265636569766564207369676e6174757265206861732065786064820152653834b932b21760d11b608482015260a40161064f565b6001600160a01b0381166000908152600460205260408120805491610df083611c6a565b919050558914610e685760405162461bcd60e51b815260206004820152603e60248201527f464c4f4b493a64656c656761746542795369673a494e56414c49445f4e4f4e4360448201527f453a205265636569766564206e6f6e63652077617320696e76616c69642e0000606482015260840161064f565b610e72818b6115cd565b505050505b505050505050565b610e87611573565b6001600160a01b038116610eec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161064f565b6109e78161165a565b6001600160a01b038316610f715760405162461bcd60e51b815260206004820152603f60248201527f464c4f4b493a5f617070726f76653a4f574e45525f5a45524f3a2043616e6e6f60448201527f7420617070726f766520666f7220746865207a65726f20616464726573732e00606482015260840161064f565b6001600160a01b038216610fef576040805162461bcd60e51b81526020600482015260248101919091527f464c4f4b493a5f617070726f76653a5350454e4445525f5a45524f3a2043616e60448201527f6e6f7420617070726f766520746f20746865207a65726f20616464726573732e606482015260840161064f565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166110d65760405162461bcd60e51b815260206004820152604160248201527f464c4f4b493a5f7472616e736665723a46524f4d5f5a45524f3a2043616e6e6f60448201527f74207472616e736665722066726f6d20746865207a65726f20616464726573736064820152601760f91b608482015260a40161064f565b6001600160a01b0382166111525760405162461bcd60e51b815260206004820152603d60248201527f464c4f4b493a5f7472616e736665723a544f5f5a45524f3a2043616e6e6f742060448201527f7472616e7366657220746f20746865207a65726f20616464726573732e000000606482015260840161064f565b600081116111d85760405162461bcd60e51b815260206004820152604760248201527f464c4f4b493a5f7472616e736665723a5a45524f5f414d4f554e543a2054726160448201527f6e7366657220616d6f756e74206d75737420626520677265617465722074686160648201526637103d32b9379760c91b608482015260a40161064f565b6001600160a01b0383166000908152600160205260409020548111156112755760405162461bcd60e51b815260206004820152604660248201527f464c4f4b493a5f7472616e736665723a494e53554646494349454e545f42414c60448201527f414e43453a205472616e7366657220616d6f756e7420657863656564732062616064820152653630b731b29760d11b608482015260a40161064f565b60085460405163c6512cc160e01b81526001600160a01b0385811660048301528481166024830152604482018490529091169063c6512cc190606401600060405180830381600087803b1580156112cb57600080fd5b505af11580156112df573d6000803e3d6000fd5b50506007546040516335eb486b60e21b81526001600160a01b03878116600483015286811660248301526044820186905260009450909116915063d7ad21ac90606401602060405180830381865afa15801561133f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113639190611c85565b905060006113718284611c9e565b6001600160a01b03861660009081526001602052604081208054929350859290919061139e908490611c9e565b90915550506001600160a01b038416600090815260016020526040812080548392906113cb908490611c52565b90915550506001600160a01b03808616600090815260036020526040808220548784168352912054611402929182169116836116aa565b81156114b1576008546001600160a01b031660009081526001602052604081208054849290611432908490611c52565b90915550506001600160a01b03808616600090815260036020526040808220546008548416835291205461146b929182169116846116aa565b6008546040518381526001600160a01b03918216918716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35b60085460405163e613b1cd60e01b81526001600160a01b0387811660048301528681166024830152604482018690529091169063e613b1cd90606401600060405180830381600087803b15801561150757600080fd5b505af115801561151b573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161156491815260200190565b60405180910390a35050505050565b6000546001600160a01b031633146109fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161064f565b6001600160a01b03828116600081815260036020818152604080842080546001845294829020549383528787166001600160a01b03198616811790915581519490961680855291840195909552939092917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f910160405180910390a26116548284836116aa565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031614156116c957505050565b6001600160e01b0381166116dc57505050565b6001600160a01b03831615611783576001600160a01b03831660009081526005602052604081205463ffffffff169081611717576000611763565b6001600160a01b03851660009081526006602052604081209061173b600185611bfc565b63ffffffff168152602081019190915260400160002054600160201b90046001600160e01b03165b905060006117718483611cb5565b905061177f8684848461182b565b5050505b6001600160a01b03821615611826576001600160a01b03821660009081526005602052604081205463ffffffff1690816117be57600061180a565b6001600160a01b0384166000908152600660205260408120906117e2600185611bfc565b63ffffffff168152602081019190915260400160002054600160201b90046001600160e01b03165b905060006118188483611cd5565b9050610e778584848461182b565b505050565b4363ffffffff84161580159061188357506001600160a01b038516600090815260066020526040812063ffffffff831691611867600188611bfc565b63ffffffff908116825260208201929092526040016000205416145b156118f3576001600160a01b038516600090815260066020526040812083916118ad600188611bfc565b63ffffffff1663ffffffff16815260200190815260200160002060000160046101000a8154816001600160e01b0302191690836001600160e01b0316021790555061198a565b60408051808201825263ffffffff80841682526001600160e01b0380861660208085019182526001600160a01b038b166000908152600682528681208b86168252909152949094209251935116600160201b029216919091179055611959846001611d00565b6001600160a01b0386166000908152600560205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160e01b038086168252841660208201526001600160a01b038716917fda5a64c2947c0b7bf4d6e7bf736c6f84d9d1c5f991770f88bbeb3fe19c85a134910160405180910390a25050505050565b600060208083528351808285015260005b81811015611a0c578581018301518582016040015282016119f0565b81811115611a1e576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114611a4b57600080fd5b919050565b60008060408385031215611a6357600080fd5b611a6c83611a34565b946020939093013593505050565b600080600060608486031215611a8f57600080fd5b611a9884611a34565b9250611aa660208501611a34565b9150604084013590509250925092565b60008060408385031215611ac957600080fd5b611ad283611a34565b9150602083013563ffffffff81168114611aeb57600080fd5b809150509250929050565b600060208284031215611b0857600080fd5b611b1182611a34565b9392505050565b60008060008060008060c08789031215611b3157600080fd5b611b3a87611a34565b95506020870135945060408701359350606087013560ff81168114611b5e57600080fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215611b8b57600080fd5b611b9483611a34565b9150611ba260208401611a34565b90509250929050565b600181811c90821680611bbf57607f821691505b60208210811415611be057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015611c1957611c19611be6565b039392505050565b600063ffffffff80841680611c4657634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60008219821115611c6557611c65611be6565b500190565b6000600019821415611c7e57611c7e611be6565b5060010190565b600060208284031215611c9757600080fd5b5051919050565b600082821015611cb057611cb0611be6565b500390565b60006001600160e01b0383811690831681811015611c1957611c19611be6565b60006001600160e01b03828116848216808303821115611cf757611cf7611be6565b01949350505050565b600063ffffffff808316818516808303821115611cf757611cf7611be656fea264697066735822122023d2144c6e5b9b2ec2b1291e98e07bea18c156d69dab9c619eecd029d07a73ff64736f6c634300080b0033",
  "devdoc": {
    "details": "The Floki token has modular systems for tax and treasury handler as well as governance capabilities.",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "owner": "The address on behalf of whom tokens can be spent by `spender`.",
          "spender": "The address authorized to spend tokens on behalf of `owner`."
        },
        "returns": {
          "_0": "The allowance `owner` has given `spender`."
        }
      },
      "approve(address,uint256)": {
        "details": "This method can be exploited by malicious spenders if their allowance is already non-zero. See the following document for details: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit. Ensure the spender can be trusted before calling this method if they've already been approved before. Otherwise use either the `increaseAllowance`/`decreaseAllowance` functions, or first set their allowance to zero, before setting a new allowance.",
        "params": {
          "amount": "The number of tokens `spender` is allowed to spend.",
          "spender": "Address to authorize for token expenditure."
        },
        "returns": {
          "_0": "True if the approval succeeds, else an error is raised."
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "Address to retrieve balance for."
        },
        "returns": {
          "_0": "The number of tokens owned by `account`."
        }
      },
      "constructor": {
        "params": {
          "name_": "Name of the token.",
          "symbol_": "Symbol of the token.",
          "taxHandlerAddress": "Initial tax handler contract.",
          "treasuryHandlerAddress": "Initial treasury handler contract."
        }
      },
      "decimals()": {
        "returns": {
          "_0": "Number of decimals used by the token."
        }
      },
      "decreaseAllowance(address,uint256)": {
        "params": {
          "spender": "Address of user authorized to spend caller's tokens.",
          "subtractedValue": "The number of tokens to remove from `spender`'s allowance."
        },
        "returns": {
          "_0": "True if the allowance is successfully decreased, else an error is raised."
        }
      },
      "delegate(address)": {
        "details": "It should be noted that users that want to vote themselves, also need to call this method, albeit with their own address.",
        "params": {
          "delegatee": "Address to delegate votes to."
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to.",
          "expiry": "The time at which to expire the signature.",
          "nonce": "The contract state required to match the signature.",
          "r": "Half of the ECDSA signature pair.",
          "s": "Half of the ECDSA signature pair.",
          "v": "The recovery byte of the signature."
        }
      },
      "getVotesAtBlock(address,uint32)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check.",
          "blockNumber": "The block number to get the vote balance at."
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block."
        }
      },
      "increaseAllowance(address,uint256)": {
        "params": {
          "addedValue": "The number of tokens to add to `spender`'s allowance.",
          "spender": "Address of user authorized to spend caller's tokens."
        },
        "returns": {
          "_0": "True if the allowance is successfully increased, else an error is raised."
        }
      },
      "name()": {
        "returns": {
          "_0": "Name of the token."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setTaxHandler(address)": {
        "params": {
          "taxHandlerAddress": "Address of new tax handler contract."
        }
      },
      "setTreasuryHandler(address)": {
        "params": {
          "treasuryHandlerAddress": "Address of new treasury handler contract."
        }
      },
      "symbol()": {
        "returns": {
          "_0": "Symbol of the token."
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "The maximum number of tokens that will ever be in existence."
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer to recipient.",
          "recipient": "Address to send the caller's tokens to."
        },
        "returns": {
          "_0": "True if transfer succeeds, else an error is raised."
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer to recipient.",
          "recipient": "Address to send the caller's tokens to.",
          "sender": "Address to move tokens from."
        },
        "returns": {
          "_0": "True if the transfer succeeds, else an error is raised."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_allowances": {
        "details": "Registry of addresses users have given allowances to."
      },
      "_balances": {
        "details": "Registry of user token balances."
      },
      "_name": {
        "details": "Name of the token."
      },
      "_symbol": {
        "details": "Symbol of the token."
      }
    },
    "title": "Floki token contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DelegateChanged(address,address,address)": {
        "notice": "Emitted whenever a new delegate is set for an account."
      },
      "DelegateVotesChanged(address,uint224,uint224)": {
        "notice": "Emitted when a delegate's vote count changes."
      },
      "TaxHandlerChanged(address,address)": {
        "notice": "Emitted when the tax handler contract is changed."
      },
      "TreasuryHandlerChanged(address,address)": {
        "notice": "Emitted when the treasury handler contract is changed."
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract."
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain."
      },
      "allowance(address,address)": {
        "notice": "Get the allowance `owner` has given `spender`."
      },
      "approve(address,uint256)": {
        "notice": "Approve address to spend caller's tokens."
      },
      "balanceOf(address)": {
        "notice": "Get token balance of given account."
      },
      "checkpoints(address,uint32)": {
        "notice": "Registry of balance checkpoints per account."
      },
      "decimals()": {
        "notice": "Get number of decimals used by the token."
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Decrease spender's allowance."
      },
      "delegate(address)": {
        "notice": "Delegate votes to given address."
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegate votes from signatory to `delegatee`."
      },
      "delegates(address)": {
        "notice": "Registry of user delegates for governance."
      },
      "getVotesAtBlock(address,uint32)": {
        "notice": "Determine the number of votes for an account as of a block number."
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Increase spender's allowance."
      },
      "name()": {
        "notice": "Get token name."
      },
      "nonces(address)": {
        "notice": "Registry of nonces for vote delegation."
      },
      "numCheckpoints(address)": {
        "notice": "Registry of the number of balance checkpoints an account has."
      },
      "setTaxHandler(address)": {
        "notice": "Set new tax handler contract."
      },
      "setTreasuryHandler(address)": {
        "notice": "Set new treasury handler contract."
      },
      "symbol()": {
        "notice": "Get token symbol."
      },
      "taxHandler()": {
        "notice": "The contract implementing tax calculations."
      },
      "totalSupply()": {
        "notice": "Get the maximum number of tokens."
      },
      "transfer(address,uint256)": {
        "notice": "Transfer tokens from caller's address to another."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer tokens from one address to another."
      },
      "treasuryHandler()": {
        "notice": "The contract that performs treasury-related operations."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 238,
        "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 243,
        "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
        "label": "delegates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 248,
        "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
        "label": "nonces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 253,
        "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 261,
        "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
        "label": "checkpoints",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1309_storage))"
      },
      {
        "astId": 277,
        "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
        "label": "taxHandler",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ITaxHandler)1354"
      },
      {
        "astId": 281,
        "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
        "label": "treasuryHandler",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ITreasuryHandler)1378"
      },
      {
        "astId": 298,
        "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
        "label": "_name",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 301,
        "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
        "label": "_symbol",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITaxHandler)1354": {
        "encoding": "inplace",
        "label": "contract ITaxHandler",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasuryHandler)1378": {
        "encoding": "inplace",
        "label": "contract ITreasuryHandler",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1309_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct IGovernanceToken.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)1309_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)1309_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct IGovernanceToken.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)1309_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)1309_storage": {
        "encoding": "inplace",
        "label": "struct IGovernanceToken.Checkpoint",
        "members": [
          {
            "astId": 1306,
            "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1308,
            "contract": "contracts/FlokiIsNotLate.sol:FlokiIsNotLate",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}